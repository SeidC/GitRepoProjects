
RFTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000362  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800082  00800082  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec7  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a6  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  000019f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f8  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aec  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3e       	cpi	r26, 0xE6	; 230
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  8a:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <FIFO_UpdateBufferStatus>:
        }        
		FIFO_Write(ptr,*str);
        str++;
	}
	return ret;
}
  92:	fc 01       	movw	r30, r24
  94:	95 81       	ldd	r25, Z+5	; 0x05
  96:	84 81       	ldd	r24, Z+4	; 0x04
  98:	26 81       	ldd	r18, Z+6	; 0x06
  9a:	21 11       	cpse	r18, r1
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <FIFO_UpdateBufferStatus+0x24>
  9e:	89 17       	cp	r24, r25
  a0:	18 f4       	brcc	.+6      	; 0xa8 <FIFO_UpdateBufferStatus+0x16>
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	83 83       	std	Z+3, r24	; 0x03
  a6:	08 95       	ret
  a8:	98 13       	cpse	r25, r24
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <FIFO_UpdateBufferStatus+0x1e>
  ac:	13 82       	std	Z+3, r1	; 0x03
  ae:	08 95       	ret
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	83 83       	std	Z+3, r24	; 0x03
  b4:	08 95       	ret
  b6:	89 17       	cp	r24, r25
  b8:	18 f4       	brcc	.+6      	; 0xc0 <FIFO_UpdateBufferStatus+0x2e>
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	83 83       	std	Z+3, r24	; 0x03
  be:	08 95       	ret
  c0:	98 13       	cpse	r25, r24
  c2:	03 c0       	rjmp	.+6      	; 0xca <FIFO_UpdateBufferStatus+0x38>
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	83 83       	std	Z+3, r24	; 0x03
  c8:	08 95       	ret
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	83 83       	std	Z+3, r24	; 0x03
  ce:	08 95       	ret

000000d0 <FIFO_Write>:
  d0:	dc 01       	movw	r26, r24
  d2:	13 96       	adiw	r26, 0x03	; 3
  d4:	2c 91       	ld	r18, X
  d6:	13 97       	sbiw	r26, 0x03	; 3
  d8:	22 30       	cpi	r18, 0x02	; 2
  da:	00 f5       	brcc	.+64     	; 0x11c <FIFO_Write+0x4c>
  dc:	15 96       	adiw	r26, 0x05	; 5
  de:	2c 91       	ld	r18, X
  e0:	15 97       	sbiw	r26, 0x05	; 5
  e2:	ed 91       	ld	r30, X+
  e4:	fc 91       	ld	r31, X
  e6:	11 97       	sbiw	r26, 0x01	; 1
  e8:	e2 0f       	add	r30, r18
  ea:	f1 1d       	adc	r31, r1
  ec:	60 83       	st	Z, r22
  ee:	15 96       	adiw	r26, 0x05	; 5
  f0:	2c 91       	ld	r18, X
  f2:	15 97       	sbiw	r26, 0x05	; 5
  f4:	12 96       	adiw	r26, 0x02	; 2
  f6:	3c 91       	ld	r19, X
  f8:	12 97       	sbiw	r26, 0x02	; 2
  fa:	23 17       	cp	r18, r19
  fc:	28 f4       	brcc	.+10     	; 0x108 <FIFO_Write+0x38>
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	15 96       	adiw	r26, 0x05	; 5
 102:	2c 93       	st	X, r18
 104:	15 97       	sbiw	r26, 0x05	; 5
 106:	07 c0       	rjmp	.+14     	; 0x116 <FIFO_Write+0x46>
 108:	15 96       	adiw	r26, 0x05	; 5
 10a:	1c 92       	st	X, r1
 10c:	15 97       	sbiw	r26, 0x05	; 5
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	16 96       	adiw	r26, 0x06	; 6
 112:	2c 93       	st	X, r18
 114:	16 97       	sbiw	r26, 0x06	; 6
 116:	cd 01       	movw	r24, r26
 118:	0e 94 49 00 	call	0x92	; 0x92 <FIFO_UpdateBufferStatus>
 11c:	08 95       	ret

0000011e <FIFO_Read>:

/******************************************************************************
 * FUNCTION: char FIFO_Read(...)
 *****************************************************************************/
char FIFO_Read(FIFO_Buffer_t* ptr)
{
 11e:	cf 93       	push	r28
 120:	fc 01       	movw	r30, r24
	char p;
	uint8_t i;
	if(FIFO_IS_BUFFER_READY(ptr) == TRUE)
 122:	93 81       	ldd	r25, Z+3	; 0x03
 124:	92 30       	cpi	r25, 0x02	; 2
 126:	88 f4       	brcc	.+34     	; 0x14a <FIFO_Read+0x2c>
    {
	    i = FIFO_GET_READ_COUNT(ptr);
 128:	84 81       	ldd	r24, Z+4	; 0x04
	    p = FIFO_GET_BUFFER_CHAR(ptr,i);
 12a:	a0 81       	ld	r26, Z
 12c:	b1 81       	ldd	r27, Z+1	; 0x01
 12e:	a8 0f       	add	r26, r24
 130:	b1 1d       	adc	r27, r1
 132:	cc 91       	ld	r28, X
 * FUNCTION: void FIFO_IncrementReadCounter(...)
 *****************************************************************************/
static void FIFO_IncrementReadCounter(FIFO_Buffer_t* ptr)
{
	uint8_t size;
	if(FIFO_GET_READ_COUNT(ptr) < FIFO_GET_BUFFER_SIZE(ptr))
 134:	92 81       	ldd	r25, Z+2	; 0x02
 136:	89 17       	cp	r24, r25
 138:	18 f4       	brcc	.+6      	; 0x140 <FIFO_Read+0x22>
	{
		size = FIFO_GET_READ_COUNT(ptr);
        FIFO_SET_READ_BUFFER(ptr,++size);
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	84 83       	std	Z+4, r24	; 0x04
 13e:	02 c0       	rjmp	.+4      	; 0x144 <FIFO_Read+0x26>
	}
	else
	{
		FIFO_SET_READ_BUFFER(ptr,0);
 140:	14 82       	std	Z+4, r1	; 0x04
        FIFO_SET_OVERFLOW_STATUS(ptr,FALSE);
 142:	16 82       	std	Z+6, r1	; 0x06
 144:	cf 01       	movw	r24, r30
	if(FIFO_IS_BUFFER_READY(ptr) == TRUE)
    {
	    i = FIFO_GET_READ_COUNT(ptr);
	    p = FIFO_GET_BUFFER_CHAR(ptr,i);
        FIFO_IncrementReadCounter(ptr);
        FIFO_UpdateBufferStatus(ptr);
 146:	0e 94 49 00 	call	0x92	; 0x92 <FIFO_UpdateBufferStatus>
    }         
	return p;
}
 14a:	8c 2f       	mov	r24, r28
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <main>:



int main(void)
{
	sei();
 150:	78 94       	sei
	USART_Init(&config);
 152:	8c e6       	ldi	r24, 0x6C	; 108
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 40 01 	call	0x280	; 0x280 <USART_Init>
 15a:	c0 e6       	ldi	r28, 0x60	; 96
 15c:	d0 e0       	ldi	r29, 0x00	; 0
 15e:	0a e6       	ldi	r16, 0x6A	; 106
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	01 c0       	rjmp	.+2      	; 0x166 <main+0x16>
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0x14>
    /* Replace with your application code */
    while (1) 
    {
		if( i  < 10)
		{
			USART_TransmitChar(av[i]);
 166:	89 91       	ld	r24, Y+
 168:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <USART_TransmitChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x22>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x2c>
 17c:	00 00       	nop
	uint8_t i = 0;
	
    /* Replace with your application code */
    while (1) 
    {
		if( i  < 10)
 17e:	c0 17       	cp	r28, r16
 180:	d1 07       	cpc	r29, r17
 182:	89 f7       	brne	.-30     	; 0x166 <main+0x16>
 184:	ef cf       	rjmp	.-34     	; 0x164 <main+0x14>

00000186 <USART_TxCallback>:
/************************************************************************/
/* void USARt_ReceiveString                                             */
/************************************************************************/
void USARt_ReceiveString(char *str, int size)
{
    FIFO_ReadString(&USART_rxBuffer,str,size);
 186:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <USART_txBuffer+0x3>
 18a:	88 23       	and	r24, r24
 18c:	29 f0       	breq	.+10     	; 0x198 <USART_TxCallback+0x12>
 18e:	84 e7       	ldi	r24, 0x74	; 116
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 8f 00 	call	0x11e	; 0x11e <FIFO_Read>
 196:	8c b9       	out	0x0c, r24	; 12
 198:	08 95       	ret

0000019a <USART_RxCallback>:
 19a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <USART_rxBuffer+0x3>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	29 f0       	breq	.+10     	; 0x1ac <USART_RxCallback+0x12>
 1a2:	6c b1       	in	r22, 0x0c	; 12
 1a4:	8b e7       	ldi	r24, 0x7B	; 123
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 68 00 	call	0xd0	; 0xd0 <FIFO_Write>
 1ac:	08 95       	ret

000001ae <USART_SetBaudrate>:
 1ae:	8f 3f       	cpi	r24, 0xFF	; 255
 1b0:	91 05       	cpc	r25, r1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <USART_SetBaudrate+0x8>
 1b4:	10 f4       	brcc	.+4      	; 0x1ba <USART_SetBaudrate+0xc>
 1b6:	89 b9       	out	0x09, r24	; 9
 1b8:	08 95       	ret
 1ba:	89 b9       	out	0x09, r24	; 9
 1bc:	90 bd       	out	0x20, r25	; 32
 1be:	08 95       	ret

000001c0 <USART_SetEnableStatus>:
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <USART_SetEnableStatus+0x8>
 1c4:	54 9a       	sbi	0x0a, 4	; 10
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <USART_SetEnableStatus+0xa>
 1c8:	54 98       	cbi	0x0a, 4	; 10
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <USART_SetEnableStatus+0x12>
 1ce:	53 9a       	sbi	0x0a, 3	; 10
 1d0:	08 95       	ret
 1d2:	53 98       	cbi	0x0a, 3	; 10
 1d4:	08 95       	ret

000001d6 <USART_SetInterrupt>:
 1d6:	57 9a       	sbi	0x0a, 7	; 10
 1d8:	56 9a       	sbi	0x0a, 6	; 10
 1da:	08 95       	ret

000001dc <USART_SetParityMode>:
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	69 f0       	breq	.+26     	; 0x1fa <USART_SetParityMode+0x1e>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	99 f0       	breq	.+38     	; 0x20a <USART_SetParityMode+0x2e>
 1e4:	81 11       	cpse	r24, r1
 1e6:	18 c0       	rjmp	.+48     	; 0x218 <USART_SetParityMode+0x3c>
 1e8:	80 b5       	in	r24, 0x20	; 32
 1ea:	8f 76       	andi	r24, 0x6F	; 111
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	80 bd       	out	0x20, r24	; 32
 1f0:	80 b5       	in	r24, 0x20	; 32
 1f2:	8f 75       	andi	r24, 0x5F	; 95
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	80 bd       	out	0x20, r24	; 32
 1f8:	08 95       	ret
 1fa:	80 b5       	in	r24, 0x20	; 32
 1fc:	8f 76       	andi	r24, 0x6F	; 111
 1fe:	80 68       	ori	r24, 0x80	; 128
 200:	80 bd       	out	0x20, r24	; 32
 202:	80 b5       	in	r24, 0x20	; 32
 204:	80 6a       	ori	r24, 0xA0	; 160
 206:	80 bd       	out	0x20, r24	; 32
 208:	08 95       	ret
 20a:	80 b5       	in	r24, 0x20	; 32
 20c:	80 69       	ori	r24, 0x90	; 144
 20e:	80 bd       	out	0x20, r24	; 32
 210:	80 b5       	in	r24, 0x20	; 32
 212:	80 6a       	ori	r24, 0xA0	; 160
 214:	80 bd       	out	0x20, r24	; 32
 216:	08 95       	ret
 218:	80 b5       	in	r24, 0x20	; 32
 21a:	8f 7e       	andi	r24, 0xEF	; 239
 21c:	80 bd       	out	0x20, r24	; 32
 21e:	80 b5       	in	r24, 0x20	; 32
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	80 bd       	out	0x20, r24	; 32
 224:	08 95       	ret

00000226 <USART_SetStopBit>:
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	29 f4       	brne	.+10     	; 0x234 <USART_SetStopBit+0xe>
 22a:	80 b5       	in	r24, 0x20	; 32
 22c:	87 77       	andi	r24, 0x77	; 119
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	80 bd       	out	0x20, r24	; 32
 232:	08 95       	ret
 234:	80 b5       	in	r24, 0x20	; 32
 236:	88 68       	ori	r24, 0x88	; 136
 238:	80 bd       	out	0x20, r24	; 32
 23a:	08 95       	ret

0000023c <USART_SetDatasize>:
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	79 f0       	breq	.+30     	; 0x25e <USART_SetDatasize+0x22>
 240:	28 f4       	brcc	.+10     	; 0x24c <USART_SetDatasize+0x10>
 242:	88 23       	and	r24, r24
 244:	e1 f0       	breq	.+56     	; 0x27e <USART_SetDatasize+0x42>
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	31 f0       	breq	.+12     	; 0x256 <USART_SetDatasize+0x1a>
 24a:	16 c0       	rjmp	.+44     	; 0x278 <USART_SetDatasize+0x3c>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	59 f0       	breq	.+22     	; 0x266 <USART_SetDatasize+0x2a>
 250:	87 30       	cpi	r24, 0x07	; 7
 252:	69 f0       	breq	.+26     	; 0x26e <USART_SetDatasize+0x32>
 254:	11 c0       	rjmp	.+34     	; 0x278 <USART_SetDatasize+0x3c>
 256:	80 b5       	in	r24, 0x20	; 32
 258:	82 68       	ori	r24, 0x82	; 130
 25a:	80 bd       	out	0x20, r24	; 32
 25c:	08 95       	ret
 25e:	80 b5       	in	r24, 0x20	; 32
 260:	84 68       	ori	r24, 0x84	; 132
 262:	80 bd       	out	0x20, r24	; 32
 264:	08 95       	ret
 266:	80 b5       	in	r24, 0x20	; 32
 268:	86 68       	ori	r24, 0x86	; 134
 26a:	80 bd       	out	0x20, r24	; 32
 26c:	08 95       	ret
 26e:	80 b5       	in	r24, 0x20	; 32
 270:	86 68       	ori	r24, 0x86	; 134
 272:	80 bd       	out	0x20, r24	; 32
 274:	52 9a       	sbi	0x0a, 2	; 10
 276:	08 95       	ret
 278:	80 b5       	in	r24, 0x20	; 32
 27a:	86 68       	ori	r24, 0x86	; 134
 27c:	80 bd       	out	0x20, r24	; 32
 27e:	08 95       	ret

00000280 <USART_Init>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	a9 f0       	breq	.+42     	; 0x2b2 <USART_Init+0x32>
 288:	ec 01       	movw	r28, r24
 28a:	8e 81       	ldd	r24, Y+6	; 0x06
 28c:	9f 81       	ldd	r25, Y+7	; 0x07
 28e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <USART_SetBaudrate>
 292:	69 81       	ldd	r22, Y+1	; 0x01
 294:	88 81       	ld	r24, Y
 296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_SetEnableStatus>
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <USART_SetParityMode>
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	0e 94 13 01 	call	0x226	; 0x226 <USART_SetStopBit>
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	0e 94 1e 01 	call	0x23c	; 0x23c <USART_SetDatasize>
 2ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <USART_SetInterrupt>
 2b0:	78 94       	sei
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <USART_TransmitChar>:
 2b8:	68 2f       	mov	r22, r24
 2ba:	84 e7       	ldi	r24, 0x74	; 116
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 68 00 	call	0xd0	; 0xd0 <FIFO_Write>
 2c2:	84 e7       	ldi	r24, 0x74	; 116
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 8f 00 	call	0x11e	; 0x11e <FIFO_Read>
 2ca:	8c b9       	out	0x0c, r24	; 12
 2cc:	08 95       	ret

000002ce <__vector_11>:
  * This routine calls the Rx Callback only. In this callback the 
  * other interrupt code can be added.
  *
  */
 ISR(USART_RXC_vect)
 {
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
     USART_RxCallback();
 2f0:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_RxCallback>
 }
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <__vector_13>:
  * called
  * This routine calls the Tx Callback only. In this callback the
  * other interrupt code can be added
  */
 ISR(USART_TXC_vect)
 {
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
     USART_TxCallback();
 338:	0e 94 c3 00 	call	0x186	; 0x186 <USART_TxCallback>
 }
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
